{"version":3,"sources":["webpack:///docs/js/vue-treeselect.1d5b0adfc85309d87f47.js","webpack:///./src/components/TreeSelect.vue?0117","webpack:///./src/mixins/childrenProp.js","webpack:///./src/mixins/idProp.js","webpack:///./src/mixins/labelProp.js","webpack:///./src/lib.js","webpack:///TreeOption.vue","webpack:///TreeSelect.vue","webpack:///TreeSelectedOption.vue","webpack:///./src/components/TreeOption.vue?512f","webpack:///./src/components/TreeSelectedOption.vue?b850","webpack:///./src/components/TreeSelectedOption.vue?a25c","webpack:///./src/components/TreeOption.vue?9a37","webpack:///./src/components/TreeSelect.vue?a672"],"names":["webpackJsonp","15","module","exports","__webpack_require__","injectStyle","ssrContext","Component","16","__webpack_exports__","props","childrenProp","type","String","default","methods","getChildren","option","this","setChildren","value","17","idProp","getId","setId","18","labelProp","getLabel","setLabel","34","Object","defineProperty","__WEBPACK_IMPORTED_MODULE_0__components_TreeSelect__","__WEBPACK_IMPORTED_MODULE_0__components_TreeSelect___default","n","36","__WEBPACK_IMPORTED_MODULE_0__mixins_idProp__","__WEBPACK_IMPORTED_MODULE_1__mixins_labelProp__","__WEBPACK_IMPORTED_MODULE_2__mixins_childrenProp__","name","mixins","required","isParentOpen","Boolean","isParentSearchResult","isSearching","areAnimationsEnabled","data","isOpen","playAnimations","computed","id","label","children","hasChildren","length","isSelected","hasChildSelected","isSearchResult","hasChildSearchResult","isVisibleAtSearch","isEnabledAtSearch","textClickHandler","toggleHandler","newIsSelectedValue","$emit","watch","37","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default","__WEBPACK_IMPORTED_MODULE_1__TreeOption__","__WEBPACK_IMPORTED_MODULE_1__TreeOption___default","__WEBPACK_IMPORTED_MODULE_2__TreeSelectedOption__","__WEBPACK_IMPORTED_MODULE_2__TreeSelectedOption___default","__WEBPACK_IMPORTED_MODULE_3__mixins_idProp__","__WEBPACK_IMPORTED_MODULE_4__mixins_labelProp__","__WEBPACK_IMPORTED_MODULE_5__mixins_childrenProp__","components","TreeOption","a","TreeSelectedOption","placeholder","disabled","searchable","hasDeleteButton","hasClearButton","searchPlaceholder","search","Function","searchQuery","optionLabelLowerCase","toLowerCase","searchQueryLowerCase","indexOf","options","Array","areOptionAnimationsEnabled","values","split","map","Number","isArray","isAnyOptionSelected","selectedOptions","optionList","_this","configureOption","isParentSelected","arguments","undefined","optionObj","index","position","childrenCount","_configureChildren","configureChildren","selectedChildrenCount","isAnyChildrenSearchResult","childrenList","i","child","push","list","_this2","checkOption","rootId","show","sort","optionA","optionB","openDropdown","closeDropdown","toggledId","_this3","isParentToggled","optionId","isToggled","isOptionIdInOldValues","includes","checkChildren","newValues","splice","concat","rootOption","find","join","selectedOptionClickHandler","clearButtonClick","directives","focus","inserted","el","38","onDelete","deleteButtonClickHandler","labelClickHandler","67","68","69","72","73","74","render","_vm","_h","$createElement","_c","_self","attrs","rawName","expression","class","treeselected","treeselected--has-delete-button","staticClass","on","click","_v","_s","_e","staticRenderFns","75","treeoption__label","treeoption__label--disabled","treeoption__indicator","treeoption__indicator--fill","treeoption__indicator--animated","$event","indicator","indicator--child-selected","indicator--is-selected","indicator--open","_l","key","toggle","76","treeselect__select","treeselect__select--open","delete","ref","size","readonly","domProps","keyup","_k","keyCode","input","target","composing","treeselect__indicator","treeselect__indicator--open"],"mappings":"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","file":"docs/js/vue-treeselect.1d5b0adfc85309d87f47.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 15:\n/***/ (function(module, exports, __webpack_require__) {\n\nfunction injectStyle (ssrContext) {\n  __webpack_require__(69)\n}\nvar Component = __webpack_require__(7)(\n  /* script */\n  __webpack_require__(37),\n  /* template */\n  __webpack_require__(76),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 16:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    /**\n     * The name of the property that holds the children value of each option.\n     *\n     * @type {String}\n     */\n    childrenProp: {\n      type: String,\n      default: 'children'\n    }\n  },\n  methods: {\n    /**\n     * Gets an option and returns its children value.\n     *\n     * @param {any} option The option which children we want to get.\n     * @returns The value of the property with the name of childrenProp.\n     */\n    getChildren: function getChildren(option) {\n      return option[this.childrenProp];\n    },\n\n    /**\n     * Gets an option and changes its\n     * children value with the given value.\n     *\n     * @param {any} option The option which children we want to set.\n     * @param {any} value The new children value.\n     */\n    setChildren: function setChildren(option, value) {\n      option[this.childrenProp] = value;\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 17:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    /**\n     * The name of the property that holds the identifier value of each option.\n     *\n     * @type {String}\n     * @default 'id'\n     */\n    idProp: {\n      type: String,\n      default: 'id'\n    }\n  },\n  methods: {\n    /**\n     * Gets an option and returns its id value.\n     *\n     * @param {any} option The option which id we want to get.\n     * @returns The value of the property with the name of idProp.\n     */\n    getId: function getId(option) {\n      return option[this.idProp];\n    },\n\n    /**\n     * Gets an option and changes its\n     * id value with the given value.\n     *\n     * @param {any} option The option which id we want to set.\n     * @param {any} value The new id value.\n     */\n    setId: function setId(option, value) {\n      option[this.idProp] = value;\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 18:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    /**\n     * The name of the property that holds the label value of each option.\n     *\n     * @type {String}\n     */\n    labelProp: {\n      type: String,\n      default: 'label'\n    }\n  },\n  methods: {\n    /**\n     * Gets an option and returns its label value.\n     *\n     * @param {any} option The option which label we want to get.\n     * @returns The value of the property with the name of labelProp.\n     */\n    getLabel: function getLabel(option) {\n      return option[this.labelProp];\n    },\n\n    /**\n     * Gets an option and changes its\n     * label value with the given value.\n     *\n     * @param {any} option The option which label we want to set.\n     * @param {any} value The new label value.\n     */\n    setLabel: function setLabel(option, value) {\n      option[this.labelProp] = value;\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 34:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_TreeSelect__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_TreeSelect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_TreeSelect__);\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (__WEBPACK_IMPORTED_MODULE_0__components_TreeSelect___default.a);\n\n/***/ }),\n\n/***/ 36:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mixins_idProp__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixins_labelProp__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mixins_childrenProp__ = __webpack_require__(16);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'TreeOption',\n  mixins: [__WEBPACK_IMPORTED_MODULE_0__mixins_idProp__[\"a\" /* default */], __WEBPACK_IMPORTED_MODULE_1__mixins_labelProp__[\"a\" /* default */], __WEBPACK_IMPORTED_MODULE_2__mixins_childrenProp__[\"a\" /* default */]],\n  props: {\n    /**\n     * The object that holds the data of the option.\n     *\n     * @type {Object}\n     */\n    option: {\n      type: Object,\n      required: true\n    },\n    /**\n     * Indicates if the dropdown of the option that contains the current option is open.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    isParentOpen: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indicates if the parent option is a candidate for a search result.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    isParentSearchResult: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indicates if a search query is provided.\n     * (a search happening right now)\n     */\n    isSearching: {\n      type: Boolean,\n      required: true\n    },\n    /**\n     * Indicates if the animations are enabled.\n     * This helps to prevent animations to be played\n     * every time the dropdown opens.\n     *\n     * @type {Boolean}\n     */\n    areAnimationsEnabled: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      /**\n       *  Indicates if the drop-down that holds the children is open.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      isOpen: false,\n      /**\n       * Indicates if the animations should be played.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      playAnimations: false\n    };\n  },\n\n  computed: {\n    /**\n     * The option's id value.\n     */\n    id: function id() {\n      return this.getId(this.option);\n    },\n\n    /**\n     * The option's label value.\n     */\n    label: function label() {\n      return this.getLabel(this.option);\n    },\n\n    /**\n     * The option's children array.\n     * If no childrenProp is defined in option returns an empty array.\n     */\n    children: function children() {\n      if (!this.getChildren(this.option)) return [];\n      return this.getChildren(this.option);\n    },\n\n    /**\n     * Indicates if the option contains any children.\n     */\n    hasChildren: function hasChildren() {\n      return this.children.length > 0;\n    },\n\n    /**\n     * Indicates if the option is marked as selected.\n     */\n    isSelected: function isSelected() {\n      return this.option.isSelected;\n    },\n\n    /**\n     * Indicates if the option has at least one child marked as selected\n     * or at least one of its children contains selected children.\n     * But returns false if all of its children are marked as selected.\n     */\n    hasChildSelected: function hasChildSelected() {\n      return this.option.hasChildSelected;\n    },\n\n    /**\n     * Indicates if the option is considered a candidate for a search result.\n     */\n    isSearchResult: function isSearchResult() {\n      return this.option.isSearchResult;\n    },\n\n    /**\n     * Indicates if the option has at least one child that\n     * is considered a candidate for a search result.\n     */\n    hasChildSearchResult: function hasChildSearchResult() {\n      return this.option.hasChildSearchResult;\n    },\n\n    /**\n     * Indicates if this option should be shown during search.\n     * An option is visible:\n     *  * if no searching is currently happening\n     *  * if is considered a candidate for a search result\n     *  * if it has at least one child that is considered a candidate for a search result\n     *  * if the parent option is a candidate for a search result and the parent's dropdown is open\n     */\n    isVisibleAtSearch: function isVisibleAtSearch() {\n      return this.isSearchResult || this.hasChildSearchResult || this.isParentOpen && this.isParentSearchResult;\n    },\n\n    /**\n     * Indicates if this option is enabled during search.\n     * An option is enabled during search:\n     *  * if is considered a candidate for a search result\n     *  * if the parent option is a candidate for a search result\n     */\n    isEnabledAtSearch: function isEnabledAtSearch() {\n      return this.isSearchResult || this.isParentSearchResult;\n    }\n  },\n  methods: {\n    /**\n     * Handles the click event of the text element.\n     * If the a search is happening and the option is not marked as enabled at search doesn't allow method to run.\n     * If the option has children toggles the isOpen data (opens / close the dropdown that holds the option's children).\n     * If the option has no children fires toggle event.\n     */\n    textClickHandler: function textClickHandler() {\n      if (this.isSearching && !this.isEnabledAtSearch) return void 0;\n      if (this.hasChildren) {\n        this.isOpen = !this.isOpen;\n        return void 0;\n      }\n      this.toggleHandler(this.id, !this.isSelected);\n    },\n\n    /**\n     * Handles the toggle event.\n     *\n     * @param {Number} id The id of the option that was toggled.\n     * @param {Boolean} newIsSelectedValue The new value of isSelected property of the toggled option.\n     */\n    toggleHandler: function toggleHandler(id, newIsSelectedValue) {\n      this.$emit('toggle', id, newIsSelectedValue, this.id);\n    }\n  },\n  watch: {\n    /**\n     * Watches the isParentOpen value.\n     * When the dropdown of the parent option that contains\n     * this option closes this option's dropdown must also close.\n     */\n    isParentOpen: function isParentOpen(value) {\n      if (!value) this.isOpen = false;\n    },\n\n    /**\n     * Watches the isSelected value and enables the animation when is changed.\n     */\n    isSelected: function isSelected(value) {\n      this.playAnimations = true;\n    },\n\n    /**\n     * Watches the hasChildSelected value and enables the animation when is changed.\n     */\n    hasChildSelected: function hasChildSelected(value) {\n      this.playAnimations = true;\n    },\n\n    /**\n     * Watches the areAnimationsEnabled and disabled the animations if its value is false.\n     */\n    areAnimationsEnabled: function areAnimationsEnabled(value) {\n      if (!value) this.playAnimations = false;\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 37:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__ = __webpack_require__(40);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__TreeOption__ = __webpack_require__(72);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__TreeOption___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__TreeOption__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__TreeSelectedOption__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__TreeSelectedOption___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__TreeSelectedOption__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mixins_idProp__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_labelProp__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mixins_childrenProp__ = __webpack_require__(16);\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'TreeSelect',\n  mixins: [__WEBPACK_IMPORTED_MODULE_3__mixins_idProp__[\"a\" /* default */], __WEBPACK_IMPORTED_MODULE_4__mixins_labelProp__[\"a\" /* default */], __WEBPACK_IMPORTED_MODULE_5__mixins_childrenProp__[\"a\" /* default */]],\n  components: {\n    TreeOption: __WEBPACK_IMPORTED_MODULE_1__TreeOption___default.a,\n    TreeSelectedOption: __WEBPACK_IMPORTED_MODULE_2__TreeSelectedOption___default.a\n  },\n  props: {\n    /**\n     * A short hint that will be displayed when no value is selected.\n     *\n     * @type {String}\n     * @default 'Please select an option.'\n     */\n    placeholder: {\n      type: String,\n      default: 'Please select an option'\n    },\n    /**\n     * Indicates if the dropdown element will be disabled.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indicates if there will be a search capability.\n     *\n     * @type {Boolean}\n     * @default true\n     */\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Indicates if the selected options\n     * will have a dedicated delete button\n     * or if they will be deleted by clicking on them.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    hasDeleteButton: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indicates if there will be a clear all\n     * selected options button.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    hasClearButton: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * A short hint that will be displayed before a search query is given.\n     *\n     * @type {String}\n     * @default 'Type to search'\n     */\n    searchPlaceholder: {\n      type: String,\n      default: 'Type to search'\n    },\n    /**\n     * A a function that is called upon every option,\n     * with the current examining option and the current search query as arguments,\n     * and when returns true marks given option as a candidate for a search result.\n     *\n     * @type {Function}\n     * @default Function Returns true if the label value of the given option contains the given search query.\n     */\n    search: {\n      type: Function,\n      default: function _default(option, searchQuery) {\n        var optionLabelLowerCase = this.getLabel(option).toLowerCase();\n        var searchQueryLowerCase = searchQuery.toLowerCase();\n        return !!~optionLabelLowerCase.indexOf(searchQueryLowerCase);\n      }\n    },\n    /**\n     * The available options.\n     * An array of objects with three properties:\n     *  * an identifier (example: option.id),\n     *  * a label (example option.label) and\n     *  * an array of children (example option.children), if the option has children.\n     *\n     * @type {Array}\n     */\n    options: {\n      type: Array,\n      required: true\n    },\n    /**\n     * Holds the selected value,\n     * an array, object or string that contains the value of the idProp of the selected options.\n     *\n     * @type {null} Accepts any type of value.\n     * @default null\n     */\n    value: {\n      type: null,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      /**\n       * Indicates if the drop-down is open.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      isOpen: false,\n      /**\n       * The query given by the user to filter the options.\n       *\n       * @type {String}\n       * @default ''\n       */\n      searchQuery: '',\n      /**\n       * Indicates if the animations of the options should be played.\n       * This is set to true only after a toggle event is fired\n       * and to false every time the dropdown closes\n       * to prevent the animations to play every time the dropdown open.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      areOptionAnimationsEnabled: false\n    };\n  },\n\n  computed: {\n    /**\n     * Indicates if a search query is provided.\n     * (a search happening right now)\n     */\n    isSearching: function isSearching() {\n      return !!this.searchQuery && this.searchQuery.length > 0;\n    },\n\n    /**\n     * An array that contains the value of the idProp of the selected options,\n     * produced from the given value.\n     */\n    values: function values() {\n      if (typeof this.value === 'string') return this.value.split(',').map(Number);\n      if (Array.isArray(this.value)) return this.value;\n      return [];\n    },\n\n    /**\n     * Indicates if any option is selected\n     *\n     * @returns {Boolean} True if any option is selected.\n     */\n    isAnyOptionSelected: function isAnyOptionSelected() {\n      return this.selectedOptions && this.selectedOptions.length > 0;\n    },\n\n    /**\n     * A list created by the original list of options given to component as a property\n     * and configured with a series of additional properties.\n     */\n    optionList: function optionList() {\n      var _this = this;\n\n      /**\n       * Creates a configured option and defines a series of properties\n       * that are required for the component to handle it.\n       *\n       * @param {Object} option The original option.\n       * @param {Boolean} [isParentSelected=false] A flag that indicates if the parent that contains the given option is marked as selected.\n       * @returns A configured option.\n       */\n      var configureOption = function configureOption(option) {\n        var isParentSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        // Creates a copy of the option\n        // that is going to be configured.\n        var optionObj = {};\n        _this.setId(optionObj, _this.getId(option));\n        _this.setLabel(optionObj, _this.getLabel(option));\n        _this.setChildren(optionObj, []);\n        optionObj.hasChildSelected = false;\n        optionObj.hasChildSearchResult = false;\n        var index = _this.values.indexOf(_this.getId(optionObj));\n        // An option is considered selected when its id value is included in the values array\n        // or its parent is marked as selected.\n        // (because the selection of an option that has children indicates the selection of all of its children)\n        optionObj.isSelected = isParentSelected || !!~index;\n        // If the option is selected sets its position as the index\n        // of the option's id in the array of the selected values\n        if (optionObj.isSelected) optionObj.position = index;\n        // An option is considered a candidate for a search result if the search function returns true.\n        optionObj.isSearchResult = _this.isSearching && _this.search(optionObj, _this.searchQuery);\n        // If the option doesn't contain any children\n        // no further configuration needs to be made.\n        var childrenCount = _this.getChildren(option) && _this.getChildren(option).length;\n        if (!childrenCount) return optionObj;\n\n        var _configureChildren = configureChildren(_this.getChildren(option), _this.getChildren(optionObj), optionObj.isSelected),\n            selectedChildrenCount = _configureChildren.selectedChildrenCount,\n            isAnyChildrenSearchResult = _configureChildren.isAnyChildrenSearchResult;\n\n        optionObj.hasChildSearchResult = _this.isSearching && isAnyChildrenSearchResult;\n        // An option can be marked that has selected children:\n        //  * if at least one of its children is selected\n        //  * if at least one of its children contains selected children\n        // but not if all of them are selected.\n        optionObj.hasChildSelected = selectedChildrenCount && selectedChildrenCount < childrenCount;\n        // If the option isn't already marked as selected but all of its children are selected\n        // then the option must also be marked selected.\n        optionObj.isSelected = optionObj.isSelected || selectedChildrenCount && selectedChildrenCount === childrenCount;\n        return optionObj;\n      };\n\n      /**\n       * Fills an array with configured children and returns a series of values to help the configuration of the parent.\n       *\n       * @param {Array} children The children of the original option.\n       * @param {Array} childrenList The list of the configured option that is going to hold the configured children.\n       * @param {Boolean} [isParentSelected=false] A flag that indicates if the option that contains the given children is marked as selected.\n       * @returns The count of selected children and if any children is considered a candidate for a search result.\n       */\n      var configureChildren = function configureChildren(children, childrenList) {\n        var isParentSelected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        var selectedChildrenCount = 0;\n        var isAnyChildrenSearchResult = false;\n        for (var i = 0; i < children.length; i++) {\n          var child = configureOption(children[i], isParentSelected);\n          // If the configured child is marked as selected\n          // then the count of selected children must be increased by 1\n          if (child.isSelected) selectedChildrenCount++;\n          // If the configured child contains children that are marked as selected\n          // then the selected children must be increased by 0.5,\n          // so the total count will always be smaller than the length of the children.\n          else if (child.hasChildSelected) selectedChildrenCount += 0.5;\n          // If the child, or any of its children, is considered a candidate for a search result\n          // then the returned flag must be true.\n          isAnyChildrenSearchResult = isAnyChildrenSearchResult || child.isSearchResult || child.hasChildSearchResult;\n          childrenList.push(child);\n        }\n        return { selectedChildrenCount: selectedChildrenCount, isAnyChildrenSearchResult: isAnyChildrenSearchResult };\n      };\n\n      var list = [];\n      for (var i = 0; i < this.options.length; i++) {\n        list.push(configureOption(this.options[i]));\n      }\n      return list;\n    },\n\n    /**\n     * An array of all the selected options objects.\n     *\n     * @type {Array}\n     */\n    selectedOptions: function selectedOptions() {\n      var _this2 = this;\n\n      /**\n       * Checks and option if it should be added to the list of selected option.\n       *  * If the option is marked as selected there is no need to check its children, because when a parent is selected also all of its children are selected.\n       *  * If it's not marked selected and the option contains children we check them.\n       *\n       * @param {Object} option The option we want to check.\n       * @param {Boolean} isParentSelected Indicates if the that contains current option is selected.\n       * @param {Number} rootId The id of the root option that contains the selected option.\n       */\n      var checkOption = function checkOption(option, isParentSelected, rootId) {\n        if (option.isSelected) {\n          list.push({\n            id: _this2.getId(option),\n            label: _this2.getLabel(option),\n            position: _this2.values.indexOf(_this2.getId(option)),\n            show: !isParentSelected,\n            rootId: rootId\n          });\n        }\n        if (_this2.getChildren(option).length > 0) {\n          for (var i = 0; i < _this2.getChildren(option).length; i++) {\n            checkOption(_this2.getChildren(option)[i], option.isSelected, rootId);\n          }\n        }\n      };\n\n      var list = [];\n      for (var i = 0; i < this.optionList.length; i++) {\n        checkOption(this.optionList[i], false, this.getId(this.optionList[i]));\n      }\n      list.sort(function (optionA, optionB) {\n        return optionA.position - optionB.position;\n      });\n      return list;\n    }\n  },\n  methods: {\n    /**\n     * Sets isOpen data to true, which opens the drop-down.\n     */\n    openDropdown: function openDropdown() {\n      this.isOpen = true;\n    },\n\n    /**\n     * Sets isOpen data to false, which closes the drop-down,\n     * and deactivates option animations.\n     */\n    closeDropdown: function closeDropdown() {\n      this.isOpen = false;\n      this.searchQuery = '';\n      this.areOptionAnimationsEnabled = false;\n    },\n\n    /**\n     * Handles the options toggle event,\n     * fires the input event (for v-model),\n     * and activates option animations\n     *\n     * @param {Number} toggledId The id of the option that was toggled.\n     * @param {Boolean} newIsSelectedValue The new value of isSelected property of the toggled option.\n     * @param {Number} rootId The id of the root option that contains the toggled option.\n     */\n    toggleHandler: function toggleHandler(toggledId, newIsSelectedValue, rootId) {\n      var _this3 = this;\n\n      /**\n       * Gets an option and if after the validations can\n       * be considered selected adds its id to the new values.\n       *\n       * @param {Object} option The option that is going to be checked.\n       * @param {Boolean} isParentToggled If the parent option is marked as toggled.\n       * @param {Boolean} isParentSelected If the parent option after the validations is marked as selected\n       * @returns {Boolean} True if the option after the validations is marked as selected.\n       */\n      var checkOption = function checkOption(option, isParentToggled, isParentSelected) {\n        var optionId = _this3.getId(option);\n        // An options is considered toggled if:\n        //  * its id is the same as the id of the option that fired the event\n        //  * its parent is marked as toggled\n        var isToggled = optionId === toggledId || isParentToggled;\n        // Checks if this option was selected before the toggled event was fired.\n        var isOptionIdInOldValues = _this3.values.includes(optionId);\n        // An option can be considered selected if:\n        //  * it's marked as toggled and the newIsSelectedValue is true\n        //  * its parent is marked as selected\n        //  * it's not marked as toggled and was selected before the toggle event was fired\n        var isSelected = isToggled ? newIsSelectedValue : isParentSelected || isOptionIdInOldValues;\n        // If the option has children it can be considered\n        // selected only if all of its children are marked\n        // as selected after the toggle event.\n        if (_this3.getChildren(option)) isSelected = checkChildren(_this3.getChildren(option), isToggled, isSelected);\n        // Removes the id of the current option from\n        // the newValues if is effected by the toggled option.\n        if (isSelected && !isOptionIdInOldValues || !isSelected && isOptionIdInOldValues) {\n          var index = newValues.indexOf(optionId);\n          if (~index) newValues.splice(index, 1);\n        }\n        if (isSelected && !isOptionIdInOldValues) newValues.push(optionId);\n        return isSelected;\n      };\n\n      /**\n       * Checks all the given children.\n       *\n       * @param {Array} children The array of children that is going to be checked.\n       * @param {Boolean} isParentToggled If the parent option is marked as toggled.\n       * @param {Boolean} isParentSelected If the parent option after the validations is marked as selected\n       * @returns {Boolean} True if all the children are marked as selected.\n       */\n      var checkChildren = function checkChildren(children, isParentToggled, isParentSelected) {\n        var selectedChildrenCount = 0;\n        for (var i = 0; i < children.length; i++) {\n          if (checkOption(children[i], isParentToggled, isParentSelected)) selectedChildrenCount++;\n        }\n        return selectedChildrenCount === children.length;\n      };\n\n      var newValues = [].concat(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(this.values));\n      // Finds the root option that contains the toggled option.\n      var rootOption = this.options.find(function (option) {\n        return _this3.getId(option) === rootId;\n      });\n      checkOption(rootOption, false, false);\n      this.$emit('input', newValues.join());\n      this.areOptionAnimationsEnabled = true;\n    },\n\n    /**\n     * Handles the click of a selected option.\n     * Calls the toggle handler with the id of\n     * the clicked selected option and false\n     * as the newIsSelectedValue to unselect the option.\n     */\n    selectedOptionClickHandler: function selectedOptionClickHandler(optionId, rootId) {\n      this.toggleHandler(optionId, false, rootId);\n    },\n\n    /**\n     * Handles the click of the clear button.\n     * Emits an input event with empty value.\n     */\n    clearButtonClick: function clearButtonClick() {\n      this.$emit('input', '');\n    }\n  },\n  watch: {\n    /**\n     * Watches isSearching value and when changes to true\n     * opens the dropdown and disables the option animations\n     * (because filtering the options triggers their animations).\n     */\n    isSearching: function isSearching(value) {\n      if (value) {\n        this.openDropdown();\n        this.areOptionAnimationsEnabled = false;\n      }\n    }\n  },\n  directives: {\n    /**\n     * When used by an element forces it to get focused after it gets inserted in the DOM\n     */\n    focus: {\n      inserted: function inserted(el) {\n        el.focus();\n      }\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 38:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    /**\n     * The object that holds the data of the option.\n     *\n     * @type {Object}\n     */\n    option: {\n      type: Object,\n      required: true\n    },\n    /**\n     * Indicates if the option has a dedicated delete button.\n     *\n     * @type {Boolean}\n     */\n    hasDeleteButton: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data: function data() {\n    return {};\n  },\n\n  methods: {\n    /**\n     * Emits a custom delete event\n     * with the option's id and rootId.\n     */\n    onDelete: function onDelete() {\n      this.$emit('delete', this.option.id, this.option.rootId);\n    },\n\n    /**\n     * Handles the click event of the\n     * delete button and fires delete event.\n     */\n    deleteButtonClickHandler: function deleteButtonClickHandler() {\n      this.onDelete();\n    },\n\n    /**\n     * Handles the click event of the\n     * label and fires delete event\n     *.if the delete button is disabled.\n     */\n    labelClickHandler: function labelClickHandler() {\n      if (!this.hasDeleteButton) this.onDelete();\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 67:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 68:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 69:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 72:\n/***/ (function(module, exports, __webpack_require__) {\n\nfunction injectStyle (ssrContext) {\n  __webpack_require__(68)\n}\nvar Component = __webpack_require__(7)(\n  /* script */\n  __webpack_require__(36),\n  /* template */\n  __webpack_require__(75),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 73:\n/***/ (function(module, exports, __webpack_require__) {\n\nfunction injectStyle (ssrContext) {\n  __webpack_require__(67)\n}\nvar Component = __webpack_require__(7)(\n  /* script */\n  __webpack_require__(38),\n  /* template */\n  __webpack_require__(74),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 74:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('transition', {\n    attrs: {\n      \"name\": \"treeselected\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.option.show),\n      expression: \"option.show\"\n    }],\n    class: {\n      treeselected: true,\n        'treeselected--has-delete-button': _vm.hasDeleteButton\n    }\n  }, [_c('div', {\n    staticClass: \"treeselected__label\",\n    on: {\n      \"click\": _vm.labelClickHandler\n    }\n  }, [_vm._v(_vm._s(_vm.option.label))]), _vm._v(\" \"), (_vm.hasDeleteButton) ? _c('div', {\n    staticClass: \"treeselected__delete-button\",\n    on: {\n      \"click\": _vm.deleteButtonClickHandler\n    }\n  }, [_vm._v(\"✕\")]) : _vm._e()])])\n},staticRenderFns: []}\n\n/***/ }),\n\n/***/ 75:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.isSearching || _vm.isVisibleAtSearch),\n      expression: \"!isSearching || isVisibleAtSearch\"\n    }],\n    staticClass: \"treeoption\"\n  }, [_c('div', {\n    class: {\n      'treeoption__label': true,\n      'treeoption__label--disabled': _vm.isSearching && !_vm.isEnabledAtSearch\n    }\n  }, [_c('div', {\n    class: {\n      'treeoption__indicator': true,\n      'treeoption__indicator--fill': _vm.isSelected,\n      'treeoption__indicator--animated': _vm.playAnimations\n    },\n    on: {\n      \"click\": function($event) {\n        (!_vm.isSearching || (_vm.isSearching && _vm.isEnabledAtSearch)) && _vm.toggleHandler(_vm.id, !_vm.isSelected)\n      }\n    }\n  }, [_c('div', {\n    class: {\n      indicator: true,\n        'indicator--child-selected': _vm.hasChildSelected,\n        'indicator--is-selected': _vm.isSelected\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"treeoption__text\",\n    on: {\n      \"click\": _vm.textClickHandler\n    }\n  }, [_vm._v(\"\\n      \" + _vm._s(_vm.label) + \" \\n      \"), _vm._v(\" \"), (_vm.hasChildren) ? _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.isSearching || _vm.isEnabledAtSearch),\n      expression: \"!isSearching || isEnabledAtSearch\"\n    }],\n    class: {\n      indicator: true,\n        'indicator--open': _vm.isOpen\n    }\n  }) : _vm._e()])]), _vm._v(\" \"), (_vm.hasChildren) ? _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.isOpen || (_vm.isSearching && _vm.isVisibleAtSearch)),\n      expression: \"isOpen || (isSearching && isVisibleAtSearch)\"\n    }],\n    staticClass: \"treeoption__children\"\n  }, [_vm._l((_vm.children), function(child) {\n    return [_c('TreeOption', {\n      key: child[_vm.idProp],\n      attrs: {\n        \"option\": child,\n        \"idProp\": _vm.idProp,\n        \"labelProp\": _vm.labelProp,\n        \"childrenProp\": _vm.childrenProp,\n        \"isParentOpen\": _vm.isOpen,\n        \"isSearching\": _vm.isSearching,\n        \"isParentSearchResult\": _vm.isParentSearchResult || _vm.isSearchResult,\n        \"areAnimationsEnabled\": _vm.areAnimationsEnabled\n      },\n      on: {\n        \"toggle\": _vm.toggleHandler\n      }\n    })]\n  })], 2) : _vm._e()])\n},staticRenderFns: []}\n\n/***/ }),\n\n/***/ 76:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"treeselect\"\n  }, [_c('div', {\n    class: {\n      //'clearfix': true,\n      'treeselect__select': true,\n      'treeselect__select--open': _vm.isOpen,\n    },\n    on: {\n      \"click\": _vm.openDropdown\n    }\n  }, [_c('div', {\n    staticClass: \"treeselect__flexbox\"\n  }, [_vm._l((_vm.selectedOptions), function(option) {\n    return _c('TreeSelectedOption', {\n      key: option.id,\n      attrs: {\n        \"option\": option,\n        \"hasDeleteButton\": _vm.hasDeleteButton\n      },\n      on: {\n        \"delete\": function($event) {\n          _vm.isOpen ? _vm.selectedOptionClickHandler(option.id, option.rootId) : null\n        }\n      }\n    })\n  }), _vm._v(\" \"), (_vm.searchable ? (_vm.isOpen || !_vm.isAnyOptionSelected) : !_vm.isAnyOptionSelected) ? _c('input', {\n    directives: [{\n      name: \"focus\",\n      rawName: \"v-focus\"\n    }, {\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.searchQuery),\n      expression: \"searchQuery\"\n    }],\n    ref: \"input\",\n    staticClass: \"treeselect__placeholder\",\n    attrs: {\n      \"size\": \"1\",\n      \"placeholder\": _vm.searchable ? _vm.searchPlaceholder : _vm.placeholder,\n      \"readonly\": !_vm.searchable\n    },\n    domProps: {\n      \"value\": (_vm.searchQuery)\n    },\n    on: {\n      \"focus\": _vm.openDropdown,\n      \"click\": _vm.openDropdown,\n      \"keyup\": function($event) {\n        if (!('button' in $event) && _vm._k($event.keyCode, \"esc\", 27)) { return null; }\n        _vm.closeDropdown($event)\n      },\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.searchQuery = $event.target.value\n      }\n    }\n  }) : _vm._e()], 2), _vm._v(\" \"), (_vm.hasClearButton) ? _c('div', {\n    staticClass: \"treeselect__clear-button\",\n    on: {\n      \"click\": function($event) {\n        _vm.clearButtonClick()\n      }\n    }\n  }, [_vm._v(\"✖\")]) : _vm._e(), _vm._v(\" \"), _c('div', {\n    class: {\n      'treeselect__indicator': true,\n      'treeselect__indicator--open': _vm.isOpen\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.isOpen),\n      expression: \"isOpen\"\n    }],\n    staticClass: \"treeselect__dropdown\"\n  }, [_vm._l((_vm.optionList), function(option) {\n    return [_c('TreeOption', {\n      key: _vm.getId(option),\n      attrs: {\n        \"option\": option,\n        \"idProp\": _vm.idProp,\n        \"labelProp\": _vm.labelProp,\n        \"childrenProp\": _vm.childrenProp,\n        \"isSearching\": _vm.isSearching,\n        \"areAnimationsEnabled\": _vm.areOptionAnimationsEnabled\n      },\n      on: {\n        \"toggle\": _vm.toggleHandler\n      }\n    })]\n  })], 2)])\n},staticRenderFns: []}\n\n/***/ })\n\n},[34]);\n\n\n// WEBPACK FOOTER //\n// docs/js/vue-treeselect.1d5b0adfc85309d87f47.js","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6a010dc8\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./TreeSelect.vue\")\n}\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./TreeSelect.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6a010dc8\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./TreeSelect.vue\"),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/TreeSelect.vue\n// module id = 15\n// module chunks = 1","export default {\n  props: {\n    /**\n     * The name of the property that holds the children value of each option.\n     *\n     * @type {String}\n     */\n    childrenProp: {\n      type: String,\n      default: 'children'\n    }\n  },\n  methods: {\n    /**\n     * Gets an option and returns its children value.\n     *\n     * @param {any} option The option which children we want to get.\n     * @returns The value of the property with the name of childrenProp.\n     */\n    getChildren (option) {\n      return option[this.childrenProp]\n    },\n    /**\n     * Gets an option and changes its\n     * children value with the given value.\n     *\n     * @param {any} option The option which children we want to set.\n     * @param {any} value The new children value.\n     */\n    setChildren (option, value) {\n      option[this.childrenProp] = value\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixins/childrenProp.js","export default {\n  props: {\n    /**\n     * The name of the property that holds the identifier value of each option.\n     *\n     * @type {String}\n     * @default 'id'\n     */\n    idProp: {\n      type: String,\n      default: 'id'\n    }\n  },\n  methods: {\n    /**\n     * Gets an option and returns its id value.\n     *\n     * @param {any} option The option which id we want to get.\n     * @returns The value of the property with the name of idProp.\n     */\n    getId (option) {\n      return option[this.idProp]\n    },\n    /**\n     * Gets an option and changes its\n     * id value with the given value.\n     *\n     * @param {any} option The option which id we want to set.\n     * @param {any} value The new id value.\n     */\n    setId (option, value) {\n      option[this.idProp] = value\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixins/idProp.js","export default {\n  props: {\n    /**\n     * The name of the property that holds the label value of each option.\n     *\n     * @type {String}\n     */\n    labelProp: {\n      type: String,\n      default: 'label'\n    }\n  },\n  methods: {\n    /**\n     * Gets an option and returns its label value.\n     *\n     * @param {any} option The option which label we want to get.\n     * @returns The value of the property with the name of labelProp.\n     */\n    getLabel (option) {\n      return option[this.labelProp]\n    },\n    /**\n     * Gets an option and changes its\n     * label value with the given value.\n     *\n     * @param {any} option The option which label we want to set.\n     * @param {any} value The new label value.\n     */\n    setLabel (option, value) {\n      option[this.labelProp] = value\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixins/labelProp.js","import TreeSelect from './components/TreeSelect'\n\nexport default TreeSelect\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib.js","<template>\n  <div v-show=\"!isSearching || isVisibleAtSearch\" class=\"treeoption\">\n    <!-- LABEL START -->\n    <div :class=\"{\n      'treeoption__label': true,\n      'treeoption__label--disabled': isSearching && !isEnabledAtSearch\n      }\">\n      <!-- INDICATOR START -->\n      <div\n       :class=\"{\n        'treeoption__indicator': true, \n        'treeoption__indicator--fill': isSelected,\n        'treeoption__indicator--animated': playAnimations\n        }\"\n        @click=\"(!isSearching || (isSearching && isEnabledAtSearch)) && toggleHandler(id, !isSelected)\">\n        <!-- INDICATOR ICON START -->\n        <div :class=\"{\n          indicator: true,\n          'indicator--child-selected' : hasChildSelected,\n          'indicator--is-selected' : isSelected\n          }\">\n        </div>\n        <!-- INDICATOR ICON END -->\n      </div>\n      <!-- INDICATOR END -->\n      <!-- TEXT START -->\n      <div class=\"treeoption__text\"\n        @click=\"textClickHandler\">\n        {{label}} \n        <!-- OPEN / CLOSE INDICATOR START -->\n        <div v-if=\"hasChildren\" \n          v-show=\"!isSearching || isEnabledAtSearch\"\n          :class=\"{\n            indicator: true,\n            'indicator--open': isOpen\n          }\">\n        <!-- OPEN / CLOSE INDICATOR END -->\n        </div>\n      </div>\n      <!-- TEXT END -->\n    </div>\n    <!-- LABEL END -->\n    <!-- CHILDREN START -->\n    <div v-if=\"hasChildren\" \n      v-show=\"isOpen || (isSearching && isVisibleAtSearch)\"\n      class=\"treeoption__children\">\n      <template v-for=\"child in children\">\n        <TreeOption \n          :key=\"child[idProp]\"\n          :option=\"child\"\n          :idProp=\"idProp\"\n          :labelProp=\"labelProp\"\n          :childrenProp=\"childrenProp\" \n          :isParentOpen=\"isOpen\"\n          :isSearching=\"isSearching\"\n          :isParentSearchResult=\"isParentSearchResult || isSearchResult\"\n          :areAnimationsEnabled=\"areAnimationsEnabled\"\n          @toggle=\"toggleHandler\">\n          </TreeOption>\n      </template>\n    </div>\n    <!-- CHILDREN END -->\n  </div>\n</template>\n\n<script>\nimport idProp from '../mixins/idProp'\nimport labelProp from '../mixins/labelProp'\nimport childrenProp from '../mixins/childrenProp'\n\nexport default {\n  name: 'TreeOption',\n  mixins: [idProp, labelProp, childrenProp],\n  props: {\n    /**\n     * The object that holds the data of the option.\n     *\n     * @type {Object}\n     */\n    option: {\n      type: Object,\n      required: true\n    },\n    /**\n     * Indicates if the dropdown of the option that contains the current option is open.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    isParentOpen: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indicates if the parent option is a candidate for a search result.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    isParentSearchResult: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indicates if a search query is provided.\n     * (a search happening right now)\n     */\n    isSearching: {\n      type: Boolean,\n      required: true\n    },\n    /**\n     * Indicates if the animations are enabled.\n     * This helps to prevent animations to be played\n     * every time the dropdown opens.\n     *\n     * @type {Boolean}\n     */\n    areAnimationsEnabled: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data () {\n    return {\n      /**\n       *  Indicates if the drop-down that holds the children is open.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      isOpen: false,\n      /**\n       * Indicates if the animations should be played.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      playAnimations: false\n    }\n  },\n  computed: {\n    /**\n     * The option's id value.\n     */\n    id () {\n      return this.getId(this.option)\n    },\n    /**\n     * The option's label value.\n     */\n    label () {\n      return this.getLabel(this.option)\n    },\n    /**\n     * The option's children array.\n     * If no childrenProp is defined in option returns an empty array.\n     */\n    children () {\n      if (!this.getChildren(this.option)) return []\n      return this.getChildren(this.option)\n    },\n    /**\n     * Indicates if the option contains any children.\n     */\n    hasChildren () {\n      return this.children.length > 0\n    },\n    /**\n     * Indicates if the option is marked as selected.\n     */\n    isSelected () {\n      return this.option.isSelected\n    },\n    /**\n     * Indicates if the option has at least one child marked as selected\n     * or at least one of its children contains selected children.\n     * But returns false if all of its children are marked as selected.\n     */\n    hasChildSelected () {\n      return this.option.hasChildSelected\n    },\n    /**\n     * Indicates if the option is considered a candidate for a search result.\n     */\n    isSearchResult () {\n      return this.option.isSearchResult\n    },\n    /**\n     * Indicates if the option has at least one child that\n     * is considered a candidate for a search result.\n     */\n    hasChildSearchResult () {\n      return this.option.hasChildSearchResult\n    },\n    /**\n     * Indicates if this option should be shown during search.\n     * An option is visible:\n     *  * if no searching is currently happening\n     *  * if is considered a candidate for a search result\n     *  * if it has at least one child that is considered a candidate for a search result\n     *  * if the parent option is a candidate for a search result and the parent's dropdown is open\n     */\n    isVisibleAtSearch () {\n      return this.isSearchResult || this.hasChildSearchResult || (this.isParentOpen && this.isParentSearchResult)\n    },\n    /**\n     * Indicates if this option is enabled during search.\n     * An option is enabled during search:\n     *  * if is considered a candidate for a search result\n     *  * if the parent option is a candidate for a search result\n     */\n    isEnabledAtSearch () {\n      return this.isSearchResult || this.isParentSearchResult\n    }\n  },\n  methods: {\n    /**\n     * Handles the click event of the text element.\n     * If the a search is happening and the option is not marked as enabled at search doesn't allow method to run.\n     * If the option has children toggles the isOpen data (opens / close the dropdown that holds the option's children).\n     * If the option has no children fires toggle event.\n     */\n    textClickHandler () {\n      if (this.isSearching && !this.isEnabledAtSearch) return void 0\n      if (this.hasChildren) {\n        this.isOpen = !this.isOpen\n        return void 0\n      }\n      this.toggleHandler(this.id, !this.isSelected)\n    },\n    /**\n     * Handles the toggle event.\n     *\n     * @param {Number} id The id of the option that was toggled.\n     * @param {Boolean} newIsSelectedValue The new value of isSelected property of the toggled option.\n     */\n    toggleHandler (id, newIsSelectedValue) {\n      this.$emit('toggle', id, newIsSelectedValue, this.id)\n    }\n  },\n  watch: {\n    /**\n     * Watches the isParentOpen value.\n     * When the dropdown of the parent option that contains\n     * this option closes this option's dropdown must also close.\n     */\n    isParentOpen (value) {\n      if (!value) this.isOpen = false\n    },\n    /**\n     * Watches the isSelected value and enables the animation when is changed.\n     */\n    isSelected (value) {\n      this.playAnimations = true\n    },\n    /**\n     * Watches the hasChildSelected value and enables the animation when is changed.\n     */\n    hasChildSelected (value) {\n      this.playAnimations = true\n    },\n    /**\n     * Watches the areAnimationsEnabled and disabled the animations if its value is false.\n     */\n    areAnimationsEnabled (value) {\n      if (!value) this.playAnimations = false\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../assets/variables.scss\";\n\n.treeoption {\n  width: 100%;\n  padding-top: $space;\n\n  &__label {\n    position: relative;\n\n    &.treeoption__label--disabled {\n\n      .treeoption__indicator {\n        cursor: not-allowed !important;\n        background-color: $color-grey;\n        &--fill {\n          background-color: $color-grey;\n        }\n      }\n\n      .indicator {\n        &--is-selected {\n          border-right: 3px solid $color-lightGrey;\n          border-bottom: 3px solid $color-lightGrey;\n        }\n\n        &--child-selected {\n          background-color: $color-grey;\n        }\n      }\n\n      .treeoption__text,\n      .treeoption__indicator {\n        cursor: default;\n      }\n\n      .treeoption__text {\n        color: $color-grey;\n      }\n    }\n  }\n\n  &__indicator {\n    cursor: pointer;\n    float: left;\n    margin-top: $space--s;\n    margin-right: $space;\n    height: $font-size;\n    width: $font-size;\n    border: 1px solid $color-grey;\n    background-color: $color-lightGrey;\n\n    &--fill {\n      border: none;\n      background-color: $color-main;\n      background: $color-gradient-webkit;\n      background: $color-gradient;\n    }\n\n    &--animated {\n      .indicator--child-selected {\n        animation: indicator--child-selected 0.2s ease-in;\n      }\n      .indicator--is-selected {\n        animation: indicator--is-selected 0.2s ease-in;\n      }\n    }\n\n    .indicator {\n\n      &--is-selected {\n        margin: 2px auto;\n        transform: rotate(45deg);\n        width: 6px;\n        height: 10px;\n        border-right: 3px solid white;\n        border-bottom: 3px solid white;\n      }\n\n      &--child-selected {\n        width: #{$font-size - 2};\n        height: #{$font-size - 2};\n        border: 2px solid $color-lightGrey;\n        background-color: $color-main;\n        background: $color-gradient-webkit;\n        background: $color-gradient;\n      }\n    }\n  }\n\n  &__text {\n    cursor: pointer;\n    text-align: left;\n\n    .indicator {\n      transition: transform 0.2s;\n      display: inline-block;\n      margin-bottom: 2px;\n      width: 0;\n      height: 0;\n      border-left: 5px solid transparent;\n      border-right: 5px solid transparent;\n      border-top: 7px solid $color-darkGrey;\n\n      &--open {\n        transform: rotate3d(0, 0, 1, -180deg);\n        border-top-color: $color-main;\n      }\n    }\n  }\n\n  &__children {\n    padding-left: $space--l;\n  }\n}\n\n@keyframes indicator--child-selected {\n  0% {\n    border-width: #{($font-size - 2) / 2};\n  }\n  75% {\n    border-width: 0;\n  }\n  100% {\n    border-width: 2px;\n  }\n}\n\n@keyframes indicator--is-selected {\n  0% {\n    border-right-width: 0;\n    border-bottom-width: 0;\n  }\n  50% {\n    border-right-width: 0;\n    border-bottom-width: 3px;\n  }\n  100% {\n    border-right-width: 3px;\n  }\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// TreeOption.vue?21532069","<template>\n  <div class=\"treeselect\">\n    <!-- SELECT START -->\n    <div :class=\"{\n      //'clearfix': true,\n      'treeselect__select': true,\n      'treeselect__select--open': isOpen,\n      }\"\n      @click=\"openDropdown\">\n      <div class=\"treeselect__flexbox\">\n        <!-- SELECTED OPTIONS START -->\n        <TreeSelectedOption\n          v-for=\"option in selectedOptions\"\n          :option=\"option\"\n          :key=\"option.id\"\n          :hasDeleteButton=\"hasDeleteButton\"\n          @delete=\"isOpen ? selectedOptionClickHandler(option.id, option.rootId) : null\"\n        />\n        <!-- SELECTED OPTIONS END -->\n        <!-- SEARCH INPUT / PLACEHOLDER START -->\n        <input v-if=\"searchable ? (isOpen || !isAnyOptionSelected) : !isAnyOptionSelected\" \n          v-focus\n          ref=\"input\"\n          size=\"1\"\n          class=\"treeselect__placeholder\"\n          v-model=\"searchQuery\"\n          :placeholder=\"searchable ? searchPlaceholder : placeholder\"\n          :readonly=\"!searchable\"\n          @focus=\"openDropdown\"\n          @click=\"openDropdown\"\n          @keyup.esc=\"closeDropdown\" />\n        <!-- SEARCH INPUT / PLACEHOLDER END -->\n      </div>\n      <!-- CLEAR BUTTON START -->\n      <div v-if=\"hasClearButton\"\n        class=\"treeselect__clear-button\"\n        @click=\"clearButtonClick()\">&#10006;</div>\n      <!-- CLEAR BUTTON END -->\n      <!-- OPEN / CLOSE INDICATOR START -->\n      <div :class=\"{\n          'treeselect__indicator': true,\n          'treeselect__indicator--open': isOpen\n        }\">\n      </div>\n      <!-- OPEN / CLOSE INDICATOR END -->\n    </div>\n    <!-- SELECT END -->\n    <!-- DROPDOWN START -->\n    <div v-show=\"isOpen\" class=\"treeselect__dropdown\">\n      <template v-for=\"option in optionList\">\n        <TreeOption \n        :key=\"getId(option)\"\n        :option=\"option\"\n        :idProp=\"idProp\"\n        :labelProp=\"labelProp\"\n        :childrenProp=\"childrenProp\"\n        :isSearching=\"isSearching\"\n        :areAnimationsEnabled=\"areOptionAnimationsEnabled\"\n        @toggle=\"toggleHandler\">\n        </TreeOption>\n      </template>\n    </div>\n    <!-- DROPDOWN END -->\n  </div>\n</template>\n\n<script>\nimport TreeOption from './TreeOption'\nimport TreeSelectedOption from './TreeSelectedOption'\nimport idProp from '../mixins/idProp'\nimport labelProp from '../mixins/labelProp'\nimport childrenProp from '../mixins/childrenProp'\n\nexport default {\n  name: 'TreeSelect',\n  mixins: [idProp, labelProp, childrenProp],\n  components: {\n    TreeOption,\n    TreeSelectedOption\n  },\n  props: {\n    /**\n     * A short hint that will be displayed when no value is selected.\n     *\n     * @type {String}\n     * @default 'Please select an option.'\n     */\n    placeholder: {\n      type: String,\n      default: 'Please select an option'\n    },\n    /**\n     * Indicates if the dropdown element will be disabled.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indicates if there will be a search capability.\n     *\n     * @type {Boolean}\n     * @default true\n     */\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Indicates if the selected options\n     * will have a dedicated delete button\n     * or if they will be deleted by clicking on them.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    hasDeleteButton: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indicates if there will be a clear all\n     * selected options button.\n     *\n     * @type {Boolean}\n     * @default false\n     */\n    hasClearButton: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * A short hint that will be displayed before a search query is given.\n     *\n     * @type {String}\n     * @default 'Type to search'\n     */\n    searchPlaceholder: {\n      type: String,\n      default: 'Type to search'\n    },\n    /**\n     * A a function that is called upon every option,\n     * with the current examining option and the current search query as arguments,\n     * and when returns true marks given option as a candidate for a search result.\n     *\n     * @type {Function}\n     * @default Function Returns true if the label value of the given option contains the given search query.\n     */\n    search: {\n      type: Function,\n      default (option, searchQuery) {\n        let optionLabelLowerCase = this.getLabel(option).toLowerCase()\n        let searchQueryLowerCase = searchQuery.toLowerCase()\n        return !!~optionLabelLowerCase.indexOf(searchQueryLowerCase)\n      }\n    },\n    /**\n     * The available options.\n     * An array of objects with three properties:\n     *  * an identifier (example: option.id),\n     *  * a label (example option.label) and\n     *  * an array of children (example option.children), if the option has children.\n     *\n     * @type {Array}\n     */\n    options: {\n      type: Array,\n      required: true\n    },\n    /**\n     * Holds the selected value,\n     * an array, object or string that contains the value of the idProp of the selected options.\n     *\n     * @type {null} Accepts any type of value.\n     * @default null\n     */\n    value: {\n      type: null,\n      default: null\n    }\n  },\n  data () {\n    return {\n      /**\n       * Indicates if the drop-down is open.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      isOpen: false,\n      /**\n       * The query given by the user to filter the options.\n       *\n       * @type {String}\n       * @default ''\n       */\n      searchQuery: '',\n      /**\n       * Indicates if the animations of the options should be played.\n       * This is set to true only after a toggle event is fired\n       * and to false every time the dropdown closes\n       * to prevent the animations to play every time the dropdown open.\n       *\n       * @type {Boolean}\n       * @default false\n       */\n      areOptionAnimationsEnabled: false\n    }\n  },\n  computed: {\n    /**\n     * Indicates if a search query is provided.\n     * (a search happening right now)\n     */\n    isSearching () {\n      return !!this.searchQuery && this.searchQuery.length > 0\n    },\n    /**\n     * An array that contains the value of the idProp of the selected options,\n     * produced from the given value.\n     */\n    values () {\n      if (typeof this.value === 'string') return this.value.split(',').map(Number)\n      if (Array.isArray(this.value)) return this.value\n      return []\n    },\n    /**\n     * Indicates if any option is selected\n     *\n     * @returns {Boolean} True if any option is selected.\n     */\n    isAnyOptionSelected () {\n      return this.selectedOptions && this.selectedOptions.length > 0\n    },\n    /**\n     * A list created by the original list of options given to component as a property\n     * and configured with a series of additional properties.\n     */\n    optionList () {\n      /**\n       * Creates a configured option and defines a series of properties\n       * that are required for the component to handle it.\n       *\n       * @param {Object} option The original option.\n       * @param {Boolean} [isParentSelected=false] A flag that indicates if the parent that contains the given option is marked as selected.\n       * @returns A configured option.\n       */\n      const configureOption = (option, isParentSelected = false) => {\n        // Creates a copy of the option\n        // that is going to be configured.\n        const optionObj = {}\n        this.setId(optionObj, this.getId(option))\n        this.setLabel(optionObj, this.getLabel(option))\n        this.setChildren(optionObj, [])\n        optionObj.hasChildSelected = false\n        optionObj.hasChildSearchResult = false\n        let index = this.values.indexOf(this.getId(optionObj))\n        // An option is considered selected when its id value is included in the values array\n        // or its parent is marked as selected.\n        // (because the selection of an option that has children indicates the selection of all of its children)\n        optionObj.isSelected = isParentSelected || !!~index\n        // If the option is selected sets its position as the index\n        // of the option's id in the array of the selected values\n        if (optionObj.isSelected) optionObj.position = index\n        // An option is considered a candidate for a search result if the search function returns true.\n        optionObj.isSearchResult = this.isSearching && this.search(optionObj, this.searchQuery)\n        // If the option doesn't contain any children\n        // no further configuration needs to be made.\n        const childrenCount = this.getChildren(option) && this.getChildren(option).length\n        if (!childrenCount) return optionObj\n        const { selectedChildrenCount, isAnyChildrenSearchResult } = configureChildren(this.getChildren(option), this.getChildren(optionObj), optionObj.isSelected)\n        optionObj.hasChildSearchResult = this.isSearching && isAnyChildrenSearchResult\n        // An option can be marked that has selected children:\n        //  * if at least one of its children is selected\n        //  * if at least one of its children contains selected children\n        // but not if all of them are selected.\n        optionObj.hasChildSelected = selectedChildrenCount && (selectedChildrenCount < childrenCount)\n        // If the option isn't already marked as selected but all of its children are selected\n        // then the option must also be marked selected.\n        optionObj.isSelected = optionObj.isSelected || (selectedChildrenCount && selectedChildrenCount === childrenCount)\n        return optionObj\n      }\n\n      /**\n       * Fills an array with configured children and returns a series of values to help the configuration of the parent.\n       *\n       * @param {Array} children The children of the original option.\n       * @param {Array} childrenList The list of the configured option that is going to hold the configured children.\n       * @param {Boolean} [isParentSelected=false] A flag that indicates if the option that contains the given children is marked as selected.\n       * @returns The count of selected children and if any children is considered a candidate for a search result.\n       */\n      const configureChildren = (children, childrenList, isParentSelected = false) => {\n        let selectedChildrenCount = 0\n        let isAnyChildrenSearchResult = false\n        for (let i = 0; i < children.length; i++) {\n          const child = configureOption(children[i], isParentSelected)\n          // If the configured child is marked as selected\n          // then the count of selected children must be increased by 1\n          if (child.isSelected) selectedChildrenCount++\n          // If the configured child contains children that are marked as selected\n          // then the selected children must be increased by 0.5,\n          // so the total count will always be smaller than the length of the children.\n          else if (child.hasChildSelected) selectedChildrenCount += 0.5\n          // If the child, or any of its children, is considered a candidate for a search result\n          // then the returned flag must be true.\n          isAnyChildrenSearchResult = isAnyChildrenSearchResult || child.isSearchResult || child.hasChildSearchResult\n          childrenList.push(child)\n        }\n        return { selectedChildrenCount, isAnyChildrenSearchResult }\n      }\n\n      const list = []\n      for (let i = 0; i < this.options.length; i++) {\n        list.push(configureOption(this.options[i]))\n      }\n      return list\n    },\n    /**\n     * An array of all the selected options objects.\n     *\n     * @type {Array}\n     */\n    selectedOptions () {\n      /**\n       * Checks and option if it should be added to the list of selected option.\n       *  * If the option is marked as selected there is no need to check its children, because when a parent is selected also all of its children are selected.\n       *  * If it's not marked selected and the option contains children we check them.\n       *\n       * @param {Object} option The option we want to check.\n       * @param {Boolean} isParentSelected Indicates if the that contains current option is selected.\n       * @param {Number} rootId The id of the root option that contains the selected option.\n       */\n      const checkOption = (option, isParentSelected, rootId) => {\n        if (option.isSelected) {\n          list.push({\n            id: this.getId(option),\n            label: this.getLabel(option),\n            position: this.values.indexOf(this.getId(option)),\n            show: !isParentSelected,\n            rootId\n          })\n        }\n        if (this.getChildren(option).length > 0) {\n          for (let i = 0; i < this.getChildren(option).length; i++) {\n            checkOption(this.getChildren(option)[i], option.isSelected, rootId)\n          }\n        }\n      }\n\n      const list = []\n      for (let i = 0; i < this.optionList.length; i++) {\n        checkOption(this.optionList[i], false, this.getId(this.optionList[i]))\n      }\n      list.sort((optionA, optionB) => {\n        return optionA.position - optionB.position\n      })\n      return list\n    }\n  },\n  methods: {\n    /**\n     * Sets isOpen data to true, which opens the drop-down.\n     */\n    openDropdown () {\n      this.isOpen = true\n    },\n    /**\n     * Sets isOpen data to false, which closes the drop-down,\n     * and deactivates option animations.\n     */\n    closeDropdown () {\n      this.isOpen = false\n      this.searchQuery = ''\n      this.areOptionAnimationsEnabled = false\n    },\n    /**\n     * Handles the options toggle event,\n     * fires the input event (for v-model),\n     * and activates option animations\n     *\n     * @param {Number} toggledId The id of the option that was toggled.\n     * @param {Boolean} newIsSelectedValue The new value of isSelected property of the toggled option.\n     * @param {Number} rootId The id of the root option that contains the toggled option.\n     */\n    toggleHandler (toggledId, newIsSelectedValue, rootId) {\n      /**\n       * Gets an option and if after the validations can\n       * be considered selected adds its id to the new values.\n       *\n       * @param {Object} option The option that is going to be checked.\n       * @param {Boolean} isParentToggled If the parent option is marked as toggled.\n       * @param {Boolean} isParentSelected If the parent option after the validations is marked as selected\n       * @returns {Boolean} True if the option after the validations is marked as selected.\n       */\n      const checkOption = (option, isParentToggled, isParentSelected) => {\n        let optionId = this.getId(option)\n        // An options is considered toggled if:\n        //  * its id is the same as the id of the option that fired the event\n        //  * its parent is marked as toggled\n        let isToggled = optionId === toggledId || isParentToggled\n        // Checks if this option was selected before the toggled event was fired.\n        let isOptionIdInOldValues = this.values.includes(optionId)\n        // An option can be considered selected if:\n        //  * it's marked as toggled and the newIsSelectedValue is true\n        //  * its parent is marked as selected\n        //  * it's not marked as toggled and was selected before the toggle event was fired\n        let isSelected = isToggled\n          ? newIsSelectedValue\n          : isParentSelected || isOptionIdInOldValues\n        // If the option has children it can be considered\n        // selected only if all of its children are marked\n        // as selected after the toggle event.\n        if (this.getChildren(option)) isSelected = checkChildren(this.getChildren(option), isToggled, isSelected)\n        // Removes the id of the current option from\n        // the newValues if is effected by the toggled option.\n        if ((isSelected && !isOptionIdInOldValues) ||\n          (!isSelected && isOptionIdInOldValues)) {\n          let index = newValues.indexOf(optionId)\n          if (~index) newValues.splice(index, 1)\n        }\n        if (isSelected && !isOptionIdInOldValues) newValues.push(optionId)\n        return isSelected\n      }\n\n      /**\n       * Checks all the given children.\n       *\n       * @param {Array} children The array of children that is going to be checked.\n       * @param {Boolean} isParentToggled If the parent option is marked as toggled.\n       * @param {Boolean} isParentSelected If the parent option after the validations is marked as selected\n       * @returns {Boolean} True if all the children are marked as selected.\n       */\n      const checkChildren = (children, isParentToggled, isParentSelected) => {\n        let selectedChildrenCount = 0\n        for (let i = 0; i < children.length; i++) {\n          if (checkOption(children[i], isParentToggled, isParentSelected)) selectedChildrenCount++\n        }\n        return selectedChildrenCount === children.length\n      }\n\n      let newValues = [...this.values]\n      // Finds the root option that contains the toggled option.\n      let rootOption = this.options.find(option => {\n        return this.getId(option) === rootId\n      })\n      checkOption(rootOption, false, false)\n      this.$emit('input', newValues.join())\n      this.areOptionAnimationsEnabled = true\n    },\n    /**\n     * Handles the click of a selected option.\n     * Calls the toggle handler with the id of\n     * the clicked selected option and false\n     * as the newIsSelectedValue to unselect the option.\n     */\n    selectedOptionClickHandler (optionId, rootId) {\n      this.toggleHandler(optionId, false, rootId)\n    },\n    /**\n     * Handles the click of the clear button.\n     * Emits an input event with empty value.\n     */\n    clearButtonClick () {\n      this.$emit('input', '')\n    }\n  },\n  watch: {\n    /**\n     * Watches isSearching value and when changes to true\n     * opens the dropdown and disables the option animations\n     * (because filtering the options triggers their animations).\n     */\n    isSearching (value) {\n      if (value) {\n        this.openDropdown()\n        this.areOptionAnimationsEnabled = false\n      }\n    }\n  },\n  directives: {\n    /**\n     * When used by an element forces it to get focused after it gets inserted in the DOM\n     */\n    focus: {\n      inserted (el) {\n        el.focus()\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../assets/variables.scss\";\n\n.treeselect {\n  position: relative;\n  font-size: $font-size;\n  line-height: $line-height;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .clearfix,\n  &.clearfix {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n\n  &__select {\n    cursor: pointer;\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    height: 100%;\n    padding: $space $space--l #{$space - $space--s} $space--l;\n    font-size: inherit;\n    line-height: inherit;\n    border: 1px solid $color-lightGrey;\n    border-radius: $space;\n\n    &--open {\n      cursor: default;\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n\n    input.treeselect__placeholder {\n      flex-grow: 1;\n      border: none;\n      margin-top: 0;\n      margin-bottom: $space--s;\n      padding-top: $space;\n      padding-bottom: $space;\n      font-size: $font-size--s;\n      line-height: $line-height--s;\n      background-color: transparent;\n      text-overflow: ellipsis;\n\n      &:focus,\n      &:active {\n        outline: none;\n      }\n    }\n  }\n\n  &__flexbox {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n    flex-grow: 1;\n  }\n\n  &__clear-button,\n  &__indicator { \n    align-self: flex-end;\n    margin-left: $space;\n  }\n\n  &__clear-button {\n    cursor: pointer;\n    margin-bottom: $space;\n    font-size: $font_size--s;\n    line-height: $font_size--s;\n    color: $color-grey;\n  }\n\n  &__indicator {\n    margin-bottom: 7px;\n    transition: transform 0.2s;\n    width: 0;\n    height: 0;\n    border-left: 6px solid transparent;\n    border-right: 6px solid transparent;\n    border-top: 9px solid $color-darkGrey;\n\n    &--open {\n      transform: rotate3d(0, 0, 1, -180deg);\n      border-top-color: $color-main;\n    }\n  }\n\n  &__dropdown {\n    overflow: auto;\n    z-index: 999;\n    position: absolute;\n    width: 100%;\n    min-height: $space--l;\n    max-height: 200px;\n    padding: $space;\n    border: 1px solid $color-lightGrey;\n    border-top: 0;\n    border-bottom-left-radius: $space;\n    border-bottom-right-radius: $space;\n    background-color: white;\n    z-index: 100;\n  }\n}\n</style>\n\n\n// WEBPACK FOOTER //\n// TreeSelect.vue?7d22a0f9","<template>\n<transition name=\"treeselected\">\n  <div v-show=\"option.show\" \n    :class=\"{\n      treeselected: true,\n      'treeselected--has-delete-button': hasDeleteButton\n    }\">\n    <div class=\"treeselected__label\"\n      @click=\"labelClickHandler\">{{option.label}}</div>\n    <div v-if=\"hasDeleteButton\"\n      class=\"treeselected__delete-button\"\n      @click=\"deleteButtonClickHandler\">&#10005;</div>\n  </div>\n</transition>\n</template>\n\n<script>\nexport default {\n  props: {\n    /**\n     * The object that holds the data of the option.\n     *\n     * @type {Object}\n     */\n    option: {\n      type: Object,\n      required: true\n    },\n    /**\n     * Indicates if the option has a dedicated delete button.\n     *\n     * @type {Boolean}\n     */\n    hasDeleteButton: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data () {\n    return {\n\n    }\n  },\n  methods: {\n    /**\n     * Emits a custom delete event\n     * with the option's id and rootId.\n     */\n    onDelete () {\n      this.$emit('delete', this.option.id, this.option.rootId)\n    },\n    /**\n     * Handles the click event of the\n     * delete button and fires delete event.\n     */\n    deleteButtonClickHandler () {\n      this.onDelete()\n    },\n    /**\n     * Handles the click event of the\n     * label and fires delete event\n     *.if the delete button is disabled.\n     */\n    labelClickHandler () {\n      if (!this.hasDeleteButton) this.onDelete()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../assets/variables.scss\";\n\n.treeselected {\n  border-radius: $space;\n  margin-right: $space--s;\n  margin-bottom: $space--s;\n  max-width: 100%;\n  float: left;\n  font-size: $font-size--s;\n  line-height: $line-height--s;\n  color: white;\n  background-color: $color-main;\n  overflow: hidden;\n  white-space: nowrap;\n\n  background-color: $color-main;\n  background: $color-gradient-webkit;\n  background: $color-gradient;\n\n\n  &:hover {\n    background: $color-main--dark;\n  }\n\n  &__label {\n    cursor: pointer;\n    display: inline-block;\n    padding: $space $space--l;\n    white-space: pre;\n\n  }\n\n  &__delete-button {\n    cursor: pointer;\n    display: inline-block;\n    text-align: center;\n    border-left: 1px white solid;\n    padding: $space--s  #{$space + 1} $space--s $space;\n\n    &:hover {\n      background: $color-main--dark;\n    }\n  }\n\n  &--has-delete-button {\n\n    .treeselected__label {\n      cursor: default;\n      padding-right: $space--s;\n    }\n  }\n\n  &-enter {\n    max-width: 0;\n  }\n\n  &-enter-active {\n    transition: max-width 0.3s cubic-bezier(0.95, 0.05, 0.795, 0.035);\n  }\n\n  \n  &-leave-to {\n    max-width: 0;\n  }\n\n  &-leave-active {\n    transition: max-width 0.2s cubic-bezier(0.95, 0.05, 0.795, 0.035);\n  }\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// TreeSelectedOption.vue?73e4bb87","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1e93fcc1\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./TreeOption.vue\")\n}\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./TreeOption.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1e93fcc1\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./TreeOption.vue\"),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/TreeOption.vue\n// module id = 72\n// module chunks = 1","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-097fdc88\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./TreeSelectedOption.vue\")\n}\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./TreeSelectedOption.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-097fdc88\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./TreeSelectedOption.vue\"),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/TreeSelectedOption.vue\n// module id = 73\n// module chunks = 1","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('transition', {\n    attrs: {\n      \"name\": \"treeselected\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.option.show),\n      expression: \"option.show\"\n    }],\n    class: {\n      treeselected: true,\n        'treeselected--has-delete-button': _vm.hasDeleteButton\n    }\n  }, [_c('div', {\n    staticClass: \"treeselected__label\",\n    on: {\n      \"click\": _vm.labelClickHandler\n    }\n  }, [_vm._v(_vm._s(_vm.option.label))]), _vm._v(\" \"), (_vm.hasDeleteButton) ? _c('div', {\n    staticClass: \"treeselected__delete-button\",\n    on: {\n      \"click\": _vm.deleteButtonClickHandler\n    }\n  }, [_vm._v(\"✕\")]) : _vm._e()])])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-097fdc88\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/TreeSelectedOption.vue\n// module id = 74\n// module chunks = 1","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.isSearching || _vm.isVisibleAtSearch),\n      expression: \"!isSearching || isVisibleAtSearch\"\n    }],\n    staticClass: \"treeoption\"\n  }, [_c('div', {\n    class: {\n      'treeoption__label': true,\n      'treeoption__label--disabled': _vm.isSearching && !_vm.isEnabledAtSearch\n    }\n  }, [_c('div', {\n    class: {\n      'treeoption__indicator': true,\n      'treeoption__indicator--fill': _vm.isSelected,\n      'treeoption__indicator--animated': _vm.playAnimations\n    },\n    on: {\n      \"click\": function($event) {\n        (!_vm.isSearching || (_vm.isSearching && _vm.isEnabledAtSearch)) && _vm.toggleHandler(_vm.id, !_vm.isSelected)\n      }\n    }\n  }, [_c('div', {\n    class: {\n      indicator: true,\n        'indicator--child-selected': _vm.hasChildSelected,\n        'indicator--is-selected': _vm.isSelected\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"treeoption__text\",\n    on: {\n      \"click\": _vm.textClickHandler\n    }\n  }, [_vm._v(\"\\n      \" + _vm._s(_vm.label) + \" \\n      \"), _vm._v(\" \"), (_vm.hasChildren) ? _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.isSearching || _vm.isEnabledAtSearch),\n      expression: \"!isSearching || isEnabledAtSearch\"\n    }],\n    class: {\n      indicator: true,\n        'indicator--open': _vm.isOpen\n    }\n  }) : _vm._e()])]), _vm._v(\" \"), (_vm.hasChildren) ? _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.isOpen || (_vm.isSearching && _vm.isVisibleAtSearch)),\n      expression: \"isOpen || (isSearching && isVisibleAtSearch)\"\n    }],\n    staticClass: \"treeoption__children\"\n  }, [_vm._l((_vm.children), function(child) {\n    return [_c('TreeOption', {\n      key: child[_vm.idProp],\n      attrs: {\n        \"option\": child,\n        \"idProp\": _vm.idProp,\n        \"labelProp\": _vm.labelProp,\n        \"childrenProp\": _vm.childrenProp,\n        \"isParentOpen\": _vm.isOpen,\n        \"isSearching\": _vm.isSearching,\n        \"isParentSearchResult\": _vm.isParentSearchResult || _vm.isSearchResult,\n        \"areAnimationsEnabled\": _vm.areAnimationsEnabled\n      },\n      on: {\n        \"toggle\": _vm.toggleHandler\n      }\n    })]\n  })], 2) : _vm._e()])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-1e93fcc1\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/TreeOption.vue\n// module id = 75\n// module chunks = 1","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"treeselect\"\n  }, [_c('div', {\n    class: {\n      //'clearfix': true,\n      'treeselect__select': true,\n      'treeselect__select--open': _vm.isOpen,\n    },\n    on: {\n      \"click\": _vm.openDropdown\n    }\n  }, [_c('div', {\n    staticClass: \"treeselect__flexbox\"\n  }, [_vm._l((_vm.selectedOptions), function(option) {\n    return _c('TreeSelectedOption', {\n      key: option.id,\n      attrs: {\n        \"option\": option,\n        \"hasDeleteButton\": _vm.hasDeleteButton\n      },\n      on: {\n        \"delete\": function($event) {\n          _vm.isOpen ? _vm.selectedOptionClickHandler(option.id, option.rootId) : null\n        }\n      }\n    })\n  }), _vm._v(\" \"), (_vm.searchable ? (_vm.isOpen || !_vm.isAnyOptionSelected) : !_vm.isAnyOptionSelected) ? _c('input', {\n    directives: [{\n      name: \"focus\",\n      rawName: \"v-focus\"\n    }, {\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.searchQuery),\n      expression: \"searchQuery\"\n    }],\n    ref: \"input\",\n    staticClass: \"treeselect__placeholder\",\n    attrs: {\n      \"size\": \"1\",\n      \"placeholder\": _vm.searchable ? _vm.searchPlaceholder : _vm.placeholder,\n      \"readonly\": !_vm.searchable\n    },\n    domProps: {\n      \"value\": (_vm.searchQuery)\n    },\n    on: {\n      \"focus\": _vm.openDropdown,\n      \"click\": _vm.openDropdown,\n      \"keyup\": function($event) {\n        if (!('button' in $event) && _vm._k($event.keyCode, \"esc\", 27)) { return null; }\n        _vm.closeDropdown($event)\n      },\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.searchQuery = $event.target.value\n      }\n    }\n  }) : _vm._e()], 2), _vm._v(\" \"), (_vm.hasClearButton) ? _c('div', {\n    staticClass: \"treeselect__clear-button\",\n    on: {\n      \"click\": function($event) {\n        _vm.clearButtonClick()\n      }\n    }\n  }, [_vm._v(\"✖\")]) : _vm._e(), _vm._v(\" \"), _c('div', {\n    class: {\n      'treeselect__indicator': true,\n      'treeselect__indicator--open': _vm.isOpen\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.isOpen),\n      expression: \"isOpen\"\n    }],\n    staticClass: \"treeselect__dropdown\"\n  }, [_vm._l((_vm.optionList), function(option) {\n    return [_c('TreeOption', {\n      key: _vm.getId(option),\n      attrs: {\n        \"option\": option,\n        \"idProp\": _vm.idProp,\n        \"labelProp\": _vm.labelProp,\n        \"childrenProp\": _vm.childrenProp,\n        \"isSearching\": _vm.isSearching,\n        \"areAnimationsEnabled\": _vm.areOptionAnimationsEnabled\n      },\n      on: {\n        \"toggle\": _vm.toggleHandler\n      }\n    })]\n  })], 2)])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-6a010dc8\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/TreeSelect.vue\n// module id = 76\n// module chunks = 1"],"sourceRoot":""}